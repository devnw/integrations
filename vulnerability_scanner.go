package integrations

import (
	"context"
	"fmt"
	"time"

	"github.com/nortonlifelock/crypto"
	"github.com/nortonlifelock/domain"
	"github.com/nortonlifelock/log"
	nexpose "github.com/nortonlifelock/nexpose/connector"
	qualys "github.com/nortonlifelock/qualys/connector"
	"github.com/pkg/errors"
)

type logger interface {
	Send(log log.Log)
}

// Vscanner is the interface for the scanner implementations
type Vscanner interface {
	Detections(ctx context.Context, groupsIDs []string) (detections <-chan domain.Detection, err error)
	Discovery(ctx context.Context, matches []domain.Match) (scanID <-chan domain.Scan)
	ScanResults(ctx context.Context, payload []byte) (detections <-chan domain.Detection, deadIPToProof <-chan domain.KeyValue, err error)
	Scan(ctx context.Context, detections []domain.Match) (scanID <-chan domain.Scan, err error)
	Scans(ctx context.Context, payloads <-chan []byte) (scans <-chan domain.Scan)
	KnowledgeBase(ctx context.Context, since *time.Time) (vulnerabilities <-chan domain.Vulnerability)
}

const (
	// Nexpose identifies the connection as a Nexpose connection
	Nexpose = "Nexpose"

	// Qualys identifies the connection as a Qualys connection
	Qualys = "Qualys"
)

type vulnScannerConfig interface {
	EncryptionKey() string
}

// NewVulnScanner returns a struct that implements the VulnerabilityScanner interface
// NewVulnScanner expects that the passed source config has the authentication details encrypted
// Expected fields encrypted for Basic Auth: password
// Expected fields encrypted for Oauth: private key, consumer key, token
func NewVulnScanner(ctx context.Context, scannerID string, db domain.DatabaseConnection, lstream logger, appconfig vulnScannerConfig, config domain.SourceConfig) (scanner Vscanner, err error) {
	var decryptedConfig domain.SourceConfig
	decryptedConfig, err = crypto.DecryptSourceConfig(db, config, appconfig)

	if err == nil {
		if len(scannerID) > 0 {
			switch scannerID {

			case Nexpose:
				scanner, err = nexpose.Connect(ctx, lstream, decryptedConfig.AuthInfo(), sord(decryptedConfig.Payload()))
			case Qualys:
				scanner, err = qualys.Connect(ctx, lstream, decryptedConfig)
			default:
				err = errors.Errorf("unrecognized scanner: %s", scannerID)
			}
		} else {
			err = fmt.Errorf("empty scanner ID passed in scanner creation")
		}
	}

	return scanner, err
}

// Expectations from Device
// Ip Address
// Mac Address
// HostName
// Ports
// Vulnerabilities
